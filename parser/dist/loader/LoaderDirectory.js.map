{"version":3,"sources":["../../src/loader/LoaderDirectory.js"],"names":["list_files","read_file","findOldestElectronVersion","require","Loader","LoaderDirectory","constructor","load","dir","files","file","_loaded","add","readAndOptionallyParse","filename","shouldParse","find","f","endsWith","undefined","load_buffer","JSON","parse","e","electron_version","packageJsonData","packagelockJsonData","yarnLockData","_electronVersion","module","exports"],"mappings":";;AAEA,MAAM,EAAEA,UAAF,EAAcC,SAAd,EAAyBC,yBAAzB,KAAuDC,QAAQ,UAAR,CAA7D;AACA,MAAM,EAAEC,MAAF,KAAaD,QAAQ,aAAR,CAAnB;;AAEA,MAAME,eAAN,SAA8BD,MAA9B,CAAqC;AACjCE,kBAAc;AACV;AACH;;AAED;;;;AAIA,UAAMC,IAAN,CAAWC,GAAX,EAAgB;AACZ,cAAMC,QAAQ,MAAMT,WAAWQ,GAAX,CAApB;;AAEA,aAAK,MAAME,IAAX,IAAmBD,KAAnB,EAA0B;AACtB,iBAAKE,OAAL,CAAaC,GAAb,CAAiBF,IAAjB;AACH;;AAED,cAAMG,yBAA0B,CAACC,QAAD,EAAWC,WAAX,KAA2B;AACvD,gBAAI;AACF,sBAAML,OAAOD,MAAMO,IAAN,CAAWC,KAAKA,EAAEC,QAAF,CAAWJ,QAAX,CAAhB,CAAb;AACA,oBAAI,CAACJ,IAAL,EAAW,OAAOS,SAAP;AACX,oBAAI,CAACJ,WAAL,EAAkB,OAAO,KAAKK,WAAL,CAAiBV,IAAjB,CAAP;AAClB,uBAAOW,KAAKC,KAAL,CAAW,KAAKF,WAAL,CAAiBV,IAAjB,CAAX,CAAP;AACD,aALD,CAKE,OAAOa,CAAP,EAAU;AACV,uBAAOJ,SAAP;AACD;AACJ,SATD;;AAWA,cAAMK,mBAAmB,MAAMtB,0BAA0B;AACrDuB,6BAAiBZ,uBAAuB,cAAvB,EAAuC,IAAvC,CADoC;AAErDa,iCAAqBb,uBAAuB,mBAAvB,EAA4C,IAA5C,CAFgC;AAGrDc,0BAAcd,uBAAuB,WAAvB,EAAoC,KAApC;AAHuC,SAA1B,CAA/B;;AAMA,YAAGW,gBAAH,EAAqB,KAAKI,gBAAL,GAAwBJ,gBAAxB;AACxB;;AAED;;;;AAIAJ,gBAAYN,QAAZ,EAAsB;AAClB,eAAOb,UAAUa,QAAV,CAAP;AACH;AA1CgC;;AA6CrCe,OAAOC,OAAP,GAAiB;AACbzB;AADa,CAAjB","file":"LoaderDirectory.js","sourcesContent":["\n\nconst { list_files, read_file, findOldestElectronVersion } = require(\"../utils\");\nconst { Loader } = require(\"./interface\");\n\nclass LoaderDirectory extends Loader {\n    constructor() {\n        super();\n    }\n\n    /**\n     * \n     * @param {FileList} dir \n     */\n    async load(dir) {\n        const files = await list_files(dir);\n        \n        for (const file of files) {\n            this._loaded.add(file);\n        }\n\n        const readAndOptionallyParse  = (filename, shouldParse) => {\n            try {\n              const file = files.find(f => f.endsWith(filename));\n              if (!file) return undefined;\n              if (!shouldParse) return this.load_buffer(file);\n              return JSON.parse(this.load_buffer(file));\n            } catch (e) {\n              return undefined;\n            }\n        };\n\n        const electron_version = await findOldestElectronVersion({\n            packageJsonData: readAndOptionallyParse('package.json', true),\n            packagelockJsonData: readAndOptionallyParse('package-lock.json', true),\n            yarnLockData: readAndOptionallyParse('yarn.lock', false),\n        });\n\n        if(electron_version) this._electronVersion = electron_version;\n    }\n\n    /**\n     * \n     * @param {File} filename \n     */\n    load_buffer(filename) { \n        return read_file(filename);\n    }\n}\n\nmodule.exports = {\n    LoaderDirectory\n}"]}