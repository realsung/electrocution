{"version":3,"sources":["../../src/loader/LoaderAsar.js"],"names":["extension","findOldestElectronVersion","require","Loader","chalk","logger","path","asar","LoaderAsar","constructor","load","archive","censorship_archive","Array","archived_files","listPackage","console","log","green","file","f","startsWith","sep","substring","indexOf","toLowerCase","_loaded","add","push","readAndOptionallyParse","filename","shouldParse","find","endsWith","undefined","load_buffer","JSON","parse","e","electron_version","packageJsonData","packagelockJsonData","yarnLockData","_electronVersion","blue","buffer","extractFile","module","exports"],"mappings":"AAAA,MAAM,EAAEA,SAAF,EAAaC,yBAAb,KAA2CC,QAAQ,UAAR,CAAjD;AACA,MAAM,EAAEC,MAAF,KAAaD,QAAQ,aAAR,CAAnB;;AAEA,MAAME,QAAQF,QAAQ,OAAR,CAAd;AACA,MAAMG,SAASH,QAAQ,SAAR,CAAf;AACA,MAAMI,OAAOJ,QAAQ,MAAR,CAAb;AACA,MAAMK,OAAOL,QAAQ,MAAR,CAAb;;AAEA,MAAMM,UAAN,SAAyBL,MAAzB,CAAgC;AAC5BM,kBAAc;AACV;AACH;;AAED;;;;AAIA,UAAMC,IAAN,CAAWC,OAAX,EAAoB;AAChB,cAAMC,qBAAqB,IAAIC,KAAJ,EAA3B;AACA,aAAKF,OAAL,GAAeA,OAAf;;AAEA,cAAMG,iBAAiBP,KAAKQ,WAAL,CAAiBJ,OAAjB,CAAvB,CAJgB,CAIkC;;AAElDK,gBAAQC,GAAR,CAAYb,MAAMc,KAAN,CAAa,2BAAb,CAAZ;;AAEA,aAAI,MAAMC,IAAV,IAAkBL,cAAlB,EAAkC;AAC9B,kBAAMM,IAAID,KAAKE,UAAL,CAAgBf,KAAKgB,GAArB,IAA4BH,KAAKI,SAAL,CAAe,CAAf,CAA5B,GAAgDJ,IAA1D;AACA,gBAAGA,KAAKK,OAAL,CAAa,cAAb,KAAgC,CAAC,CAApC,EAAuC;;AAEvC,oBAAQxB,UAAUmB,IAAV,CAAR;AACI,qBAAK,MAAL;AACI,wBAAIA,KAAKM,WAAL,GAAmBD,OAAnB,CAA2B,cAA3B,IAA6C,CAAjD,EACA;AACJ,qBAAK,IAAL;AACA,qBAAK,KAAL;AACA,qBAAK,IAAL;AACA,qBAAK,KAAL;AACA,qBAAK,KAAL;AACA,qBAAK,MAAL;AAAa;AACT,6BAAKE,OAAL,CAAaC,GAAb,CAAiBR,IAAjB;AACAP,2CAAmBgB,IAAnB,CAAwBT,IAAxB;AACA;AACH;AACD;AACI;AAfR;AAiBH;;AAED,cAAMU,yBAA0B,CAACC,QAAD,EAAWC,WAAX,KAA2B;AACvD,gBAAI;AACA,sBAAMZ,OAAOP,mBAAmBoB,IAAnB,CAAwBZ,KAAKA,EAAEa,QAAF,CAAWH,QAAX,CAA7B,CAAb;AACA,sBAAMV,IAAID,KAAKE,UAAL,CAAgBf,KAAKgB,GAArB,IAA4BH,KAAKI,SAAL,CAAe,CAAf,CAA5B,GAAgDJ,IAA1D;AACA,oBAAI,CAACC,CAAL,EAAQ,OAAOc,SAAP;AACR,oBAAG,CAACH,WAAJ,EAAiB,OAAO,KAAKI,WAAL,CAAiBf,CAAjB,CAAP;AACjB,uBAAQgB,KAAKC,KAAL,CAAW,KAAKF,WAAL,CAAiBf,CAAjB,CAAX,CAAR;AACH,aAND,CAME,OAAOkB,CAAP,EAAU;AACR,uBAAOJ,SAAP;AACH;AACJ,SAVD;;AAYA,cAAMK,mBAAmB,MAAMtC,0BAA0B;AACrDuC,6BAAiBX,uBAAuB,cAAvB,EAAuC,IAAvC,CADoC;AAErDY,iCAAqBZ,uBAAuB,mBAAvB,EAA4C,IAA5C,CAFgC;AAGrDa,0BAAcb,uBAAuB,WAAvB,EAAoC,KAApC;AAHuC,SAA1B,CAA/B;;AAMA,YAAGU,gBAAH,EAAqB,KAAKI,gBAAL,GAAwBJ,gBAAxB;AACxB;;AAEDJ,gBAAYL,QAAZ,EAAsB;AAClBd,gBAAQC,GAAR,CAAYb,MAAMwC,IAAN,CAAY,oBAAmBd,QAAS,EAAxC,CAAZ;AACA,cAAMe,SAAStC,KAAKuC,WAAL,CAAiB,KAAKnC,OAAtB,EAA+BmB,QAA/B,CAAf;AACA,eAAOe,MAAP;AACH;AAjE2B;;AAoEhCE,OAAOC,OAAP,GAAiB;AACbxC;AADa,CAAjB","file":"LoaderAsar.js","sourcesContent":["const { extension, findOldestElectronVersion } = require(\"../utils\");\nconst { Loader } = require(\"./interface\");\n\nconst chalk = require(\"chalk\");\nconst logger = require(\"winston\");\nconst path = require(\"path\");\nconst asar = require(\"asar\");\n\nclass LoaderAsar extends Loader {\n    constructor() {\n        super();\n    }\n\n    /**\n     * \n     * @param {FileList} archive \n     */\n    async load(archive) {\n        const censorship_archive = new Array();\n        this.archive = archive;\n\n        const archived_files = asar.listPackage(archive); // unpack asar\n\n        console.log(chalk.green(`Success archive asar file`));\n\n        for(const file of archived_files) {\n            const f = file.startsWith(path.sep) ? file.substring(1) : file;\n            if(file.indexOf('node_modules') != -1) continue;\n\n            switch (extension(file)) {\n                case 'json':\n                    if (file.toLowerCase().indexOf('package.json') < 0)\n                    continue;\n                case 'js':\n                case 'jsx':\n                case 'ts':\n                case 'tsx':\n                case 'htm':\n                case 'html': {\n                    this._loaded.add(file);\n                    censorship_archive.push(file);\n                    break;\n                }\n                default:\n                    break;\n            }\n        }\n\n        const readAndOptionallyParse  = (filename, shouldParse) => {\n            try {\n                const file = censorship_archive.find(f => f.endsWith(filename));\n                const f = file.startsWith(path.sep) ? file.substring(1) : file;\n                if (!f) return undefined;\n                if(!shouldParse) return this.load_buffer(f);\n                return (JSON.parse(this.load_buffer(f)));\n            } catch (e) {\n                return undefined;\n            }\n        };\n\n        const electron_version = await findOldestElectronVersion({\n            packageJsonData: readAndOptionallyParse('package.json', true),\n            packagelockJsonData: readAndOptionallyParse('package-lock.json', true),\n            yarnLockData: readAndOptionallyParse('yarn.lock', false),\n        });\n\n        if(electron_version) this._electronVersion = electron_version;\n    }\n\n    load_buffer(filename) {\n        console.log(chalk.blue(`Extracting file: ${filename}`));\n        const buffer = asar.extractFile(this.archive, filename);\n        return buffer;\n    }\n}\n\nmodule.exports = {\n    LoaderAsar\n}"]}