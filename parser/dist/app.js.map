{"version":3,"sources":["../src/app.js"],"names":["file_exist","is_directory","extension","writeIssues","getRelativePath","require","chalk","program","LoaderDirectory","LoaderFile","LoaderAsar","logger","Parser","GlobalChecks","severity","confidence","app","options","input","console","error","red","outputHelp","process","exit","loader","load","electron_version","electronVersion","log","bold","green","severitySet","hasOwnProperty","toUpperCase","err","forCli","Error","confidenceSet","parser","parserPlugins","length","forEach","plugin","addPlugin","globalChecker","customScan","excludeFromScan","electronUpgrade","module","exports"],"mappings":"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","file":"app.js","sourcesContent":["\n\nconst { file_exist, is_directory, extension, writeIssues, getRelativePath } = require(\"./utils\");\nconst chalk = require(\"chalk\");\nconst program = require(\"commander\");\nconst { LoaderDirectory, LoaderFile, LoaderAsar } = require(\"./loader\");\nconst logger = require(\"winston\");\nconst { Parser } = require(\"./parser\");\nconst { GlobalChecks, severity, confidence } = require(\"./find\");\n\n/**\n * \n * @param { program.Command } options \n */\nasync function app(options) {\n    if(!file_exist(options.input)){\n        console.error(chalk.red('Input does not exist!'));\n        program.outputHelp();\n        process.exit(0);\n    }\n\n    let loader;\n    if(is_directory(options.input)) {\n        loader = new LoaderDirectory();\n    } else {\n        loader = (extension(options.input) === 'asar') ? new LoaderAsar() : new LoaderFile();\n    }\n\n    await loader.load(options.input);\n    const electron_version = loader.electronVersion();\n    if (!electron_version) console.log(chalk.red(`Couldn't detect Electron version, assuming v0.1.0. Defaults have probably changed for your actual version, please check manually.`));\n    else console.log(chalk.bold(chalk.green(`[+] electron version is \"${electron_version}\"`)));\n\n    if (options.severitySet) {\n        if (!severity.hasOwnProperty(options.severitySet.toUpperCase())) {\n          const err = 'This severity level does not exist!';\n          if (forCli) {\n            console.error(chalk.red(err));\n            process.exit(1);\n          } else throw new Error(err);\n        } else options.severitySet = severity[options.severitySet.toUpperCase()];\n      } else options.severitySet = severity[\"INFORMATIONAL\"]; \n    \n      if (options.confidenceSet) {\n        if (!confidence.hasOwnProperty(options.confidenceSet.toUpperCase())) {\n          const err = 'This confidence level does not exist!';\n          if (forCli) {\n            console.error(chalk.red(err));\n            process.exit(1);\n          } else throw new Error(err);\n        } else options.confidenceSet = confidence[options.confidenceSet.toUpperCase()];\n    } else options.confidenceSet = confidence[\"TENTATIVE\"]; \n    \n\n    const parser = new Parser(false, true);\n\n    if (options.parserPlugins.length > 0) {\n        options.parserPlugins.forEach(plugin => parser.addPlugin(plugin));\n    }\n    \n    const globalChecker = new GlobalChecks(options.customScan, options.excludeFromScan, options.electronUpgrade);\n\n    // if (options.customScan.length > 0) options.customScan = options.customScan.filter(r => !r.includes('globalcheck')).concat(globalChecker.dependencies);\n    // if (options.excludeFromScan.length > 0) options.excludeFromScan = options.excludeFromScan.filter(r => !r.includes('globalcheck'));\n\n    // const finder = await new Finder(options.customScan, options.excludeFromScan, options.electronUpgrade);\n    // const filenames = [...loader.list_files()];\n    // console.log(filenames);\n}\n\nmodule.exports = {\n    app\n}"]}