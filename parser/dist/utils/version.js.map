{"version":3,"sources":["../../src/utils/version.js"],"names":["minVersion","compare","require","lockfile","minMatchingVersion","versionString","v","raw","_","undefined","oldestVersion","versions","sortedVersioned","Array","sort","a","b","length","findElectronVersionFromPackageJson","packageJsonData","dependencies","Object","assign","devDependencies","findElectronVersionsFromPackageLock","packagelockJsonData","entries","filter","d","map","version","findElectronVersionsFromYarnLock","yarnLockData","plockData","parse","findOldestElectronVersion","places","console","log","push","plockVersions","yarnLockVersions","module","exports"],"mappings":"AAAA,MAAM,EAAEA,UAAF,EAAcC,OAAd,KAA0BC,QAAQ,QAAR,CAAhC;AACA,MAAMC,WAAWD,QAAQ,mBAAR,CAAjB;;AAEA;;;;AAIA,SAASE,kBAAT,CAA4BC,aAA5B,EAA2C;AACvC,QAAI;AACA,cAAMC,IAAIN,WAAWK,aAAX,CAAV;AACA,eAAOC,EAAEC,GAAT;AACH,KAHD,CAGE,OAAMC,CAAN,EAAS;AAAE,eAAOC,SAAP;AAAmB;AACnC;;AAED;;;;AAIA,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;AAC7B,UAAMC,kBAAkB,CAACD,YAAY,IAAIE,KAAJ,EAAb,EAA0BC,IAA1B,CAA+B,CAACC,CAAD,EAAIC,CAAJ,KAAUf,QAAQc,CAAR,EAAWC,CAAX,CAAzC,CAAxB;AACA,WAAOJ,gBAAgBK,MAAhB,GAAyB,CAAzB,GAA6Bb,mBAAmBQ,gBAAgB,CAAhB,CAAnB,CAA7B,GAAsEH,SAA7E;AACH;;AAED;;;;AAIA,SAASS,kCAAT,CAA4CC,eAA5C,EAA6D;AACzD,UAAMC,eAAeC,OAAOC,MAAP,CAAc,EAAd,EAAkBH,gBAAgBI,eAAlC,EAAmDJ,gBAAgBC,YAAnE,CAArB;AACA,WAAOhB,mBAAmBgB,aAAa,iBAAb,KAAmCA,aAAa,UAAb,CAAtD,CAAP;AACH;;AAED;;;;AAIA,SAASI,mCAAT,CAA6CC,mBAA7C,EAAkE;AAC9D,QAAI,CAACA,oBAAoBL,YAAzB,EAAuC,OAAOX,SAAP;AACvC,WAAOY,OAAOK,OAAP,CAAeD,oBAAoBL,YAAnC,EAAiDO,MAAjD,CAAwDC,KAAKA,EAAE,CAAF,MAAS,UAAtE,EAAkFC,GAAlF,CAAsFD,KAAKxB,mBAAmBwB,EAAE,CAAF,EAAKE,OAAxB,CAA3F,CAAP;AACH;;AAED;;;;AAIA,SAASC,gCAAT,CAA0CC,YAA1C,EAAwD;AACpD,UAAMC,YAAY9B,SAAS+B,KAAT,CAAeF,YAAf,CAAlB;AACA,WAAOR,oCAAoCS,SAApC,CAAP;AACD;;AAEH;;;;;;;AAOC,eAAeE,yBAAf,CAAyCC,MAAzC,EAAiD;AAC9CC,YAAQC,GAAR,CAAYF,OAAOjB,eAAnB;AACA,QAAIR,WAAW,IAAIE,KAAJ,EAAf;;AAEA,QAAIuB,OAAOjB,eAAX,EAA4B;AACxB,cAAMA,kBAAkBD,mCAAmCkB,OAAOjB,eAA1C,CAAxB;AACA,YAAIA,eAAJ,EAAqBR,SAAS4B,IAAT,CAAcpB,eAAd;AACxB;;AAED,QAAIiB,OAAOX,mBAAX,EAAgC;AAC5B,cAAMe,gBAAgBhB,oCAAoCY,OAAOH,SAA3C,CAAtB;AACA,YAAIO,aAAJ,EAAmB7B,SAAS4B,IAAT,CAAc,GAAGC,aAAjB;AACtB;;AAED,QAAIJ,OAAOJ,YAAX,EAAyB;AACzB,cAAMS,mBAAmBV,iCAAiCK,OAAOJ,YAAxC,CAAzB;AACA,YAAIS,gBAAJ,EAAsB9B,SAAS4B,IAAT,CAAc,GAAGE,gBAAjB;AACrB;;AAED;AACA,WAAO/B,cAAcC,QAAd,CAAP;AACH;;AAED+B,OAAOC,OAAP,GAAiB;AACbR;AADa,CAAjB","file":"version.js","sourcesContent":["const { minVersion, compare } = require(\"semver\");\nconst lockfile = require(\"@yarnpkg/lockfile\");\n\n/**\n * \n * @param {String} versionString \n */\nfunction minMatchingVersion(versionString) {\n    try {\n        const v = minVersion(versionString);\n        return v.raw;\n    } catch(_) { return undefined; }\n}\n\n/**\n * \n * @param {Array} versions \n */\nfunction oldestVersion(versions) {\n    const sortedVersioned = (versions || new Array()).sort((a, b) => compare(a, b));\n    return sortedVersioned.length > 0 ? minMatchingVersion(sortedVersioned[0]) : undefined;\n}\n\n/**\n *  \n * @param {Object} packageJsonData \n */\nfunction findElectronVersionFromPackageJson(packageJsonData) {\n    const dependencies = Object.assign({}, packageJsonData.devDependencies, packageJsonData.dependencies);\n    return minMatchingVersion(dependencies['@types/electron'] || dependencies['electron']);\n}\n\n/**\n * \n * @param {Object} packagelockJsonData \n */\nfunction findElectronVersionsFromPackageLock(packagelockJsonData) {\n    if (!packagelockJsonData.dependencies) return undefined;\n    return Object.entries(packagelockJsonData.dependencies).filter(d => d[0] === 'electron').map(d => minMatchingVersion(d[1].version));\n}\n\n/**\n * \n * @param {Object} yarnLockData \n */\nfunction findElectronVersionsFromYarnLock(yarnLockData) {\n    const plockData = lockfile.parse(yarnLockData);\n    return findElectronVersionsFromPackageLock(plockData);\n  }\n\n/**\n * \n * @param {Object} places \n * @param {Object} [places.packageJsonData]\n * @param {Object} [places.packagelockJsonData]\n * @param {Object} [places.yarnLockData]\n*/\n async function findOldestElectronVersion(places) {\n    console.log(places.packageJsonData);\n    var versions = new Array();\n\n    if (places.packageJsonData) {\n        const packageJsonData = findElectronVersionFromPackageJson(places.packageJsonData);\n        if (packageJsonData) versions.push(packageJsonData);\n    }\n\n    if (places.packagelockJsonData) {\n        const plockVersions = findElectronVersionsFromPackageLock(places.plockData);\n        if (plockVersions) versions.push(...plockVersions);\n    }\n    \n    if (places.yarnLockData) {\n    const yarnLockVersions = findElectronVersionsFromYarnLock(places.yarnLockData);\n    if (yarnLockVersions) versions.push(...yarnLockVersions);\n    }\n\n    // console.log(versions);\n    return oldestVersion(versions);\n}\n\nmodule.exports = {\n    findOldestElectronVersion\n}"]}