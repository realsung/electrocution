{"version":3,"sources":["../../src/utils/exceptions.js"],"names":["Types","require","isDisabledByInlineComment","firstLineSample","matchedLineSample","check","sourceType","result","excludesGlobal","inlineDisabled","globalCheckDisabled","regex","entireFileRulesList","match","inlineRulesList","mergedRules","length","trim","split","directive","toLowerCase","constructor","name","toUpperCase","id","replace","push","module","exports"],"mappings":";AACA,MAAM,EAAEA,KAAF,KAAYC,QAAQ,iBAAR,CAAlB;;AAEA,SAASC,yBAAT,CAAmCC,eAAnC,EAAoDC,iBAApD,EAAuEC,KAAvE,EAA8EC,UAA9E,EAA0F;;AAEtF,QAAIC,SAAS;AACXC,wBAAgB,EADL;AAEXC,wBAAgB,KAFL;AAGXC,6BAAqB;AAHV,KAAb;;AAMA,UAAMC,QAAQ,CACC,kDADD,EAEC,4CAFD,EAGEL,UAHF,CAAd;;AAKA,QAAIM,sBAAsBT,gBAAgBU,KAAhB,CAAsBF,KAAtB,CAA1B;AACA,QAAIG,kBAAkBV,kBAAkBS,KAAlB,CAAwBF,KAAxB,CAAtB;AACA,QAAII,cAAc,EAAlB;;AAEA,QAAIH,uBAAuB,IAAvB,IAA+BA,oBAAoBI,MAApB,GAA6B,CAAhE,EAAmE;AACjEJ,8BAAsBA,oBAAoB,CAApB,EAAuBK,IAAvB,GAA8BC,KAA9B,CAAoC,aAApC,CAAtB;AACAH,sBAAc,CAAC,GAAGA,WAAJ,EAAiB,GAAGH,mBAApB,CAAd;AACD;;AAED,QAAIE,mBAAmB,IAAnB,IAA2BA,gBAAgBE,MAAhB,GAAyB,CAAxD,EAA2D;AACzDF,0BAAkBA,gBAAgB,CAAhB,EAAmBG,IAAnB,GAA0BC,KAA1B,CAAgC,aAAhC,CAAlB;AACAH,sBAAc,CAAC,GAAGA,WAAJ,EAAiB,GAAGD,eAApB,CAAd;AACD;;AAED,SAAK,IAAIK,SAAT,IAAsBJ,WAAtB,EAAmC;AAC/B,YAAII,UAAUC,WAAV,OAA4Bf,MAAMgB,WAAN,CAAkBC,IAAlB,CAAuBF,WAAvB,EAA5B,IACAD,UAAUI,WAAV,OAA4BlB,MAAMmB,EAAN,CAASD,WAAT,EADhC,EACwD;AACpDhB,mBAAOE,cAAP,GAAwB,IAAxB;AACA;AACH;AACJ;;AAED,SAAK,IAAIU,SAAT,IAAsBJ,WAAtB,EAAmC;AAC/B,YAAII,UAAUC,WAAV,OAA4Bf,MAAMgB,WAAN,CAAkBC,IAAlB,CAAuBF,WAAvB,GAAqCK,OAArC,CAA6C,uBAA7C,EAAqE,eAArE,CAA5B,IACAN,UAAUI,WAAV,OAA4BlB,MAAMmB,EAAN,CAASD,WAAT,GAAuBE,OAAvB,CAA+B,uBAA/B,EAAuD,eAAvD,CADhC,EACyG;AACrGlB,mBAAOC,cAAP,CAAsBkB,IAAtB,CAA2BP,UAAUI,WAAV,EAA3B;AACA;AACH;AACJ;;AAED,WAAOhB,MAAP;AACH;;AAEDoB,OAAOC,OAAP,GAAiB;AACb1B;AADa,CAAjB","file":"exceptions.js","sourcesContent":["\nconst { Types } = require(\"../parser/types\");\n\nfunction isDisabledByInlineComment(firstLineSample, matchedLineSample, check, sourceType) {\n\n    var result = {\n      excludesGlobal: [],\n      inlineDisabled: false,\n      globalCheckDisabled: false\n    };\n\n    const regex = [\n                   /(?:\\/\\*|\\/\\/)[ \\t]*eng-disable[ \\t]+([\\w \\t]+)/is, \n                   /<!--[ \\t]*eng-disable[ \\t]+([\\w \\t]+)-->/is        \n                  ][sourceType];\n\n    var entireFileRulesList = firstLineSample.match(regex);\n    var inlineRulesList = matchedLineSample.match(regex);\n    var mergedRules = [];\n\n    if (entireFileRulesList != null && entireFileRulesList.length > 1) { \n      entireFileRulesList = entireFileRulesList[1].trim().split(/(?:,| |\\t)+/);\n      mergedRules = [...mergedRules, ...entireFileRulesList];\n    }\n\n    if (inlineRulesList != null && inlineRulesList.length > 1) { \n      inlineRulesList = inlineRulesList[1].trim().split(/(?:,| |\\t)+/);\n      mergedRules = [...mergedRules, ...inlineRulesList];\n    }\n   \n    for (var directive of mergedRules) {\n        if (directive.toLowerCase() === check.constructor.name.toLowerCase() ||\n            directive.toUpperCase() === check.id.toUpperCase()) {\n            result.inlineDisabled = true;\n            break;\n        }\n    }\n\n    for (var directive of mergedRules) {\n        if (directive.toLowerCase() === check.constructor.name.toLowerCase().replace(/_(js|html|json)_check/,\"_global_check\") ||\n            directive.toUpperCase() === check.id.toUpperCase().replace(/_(JS|HTML|JSON)_CHECK/,\"_GLOBAL_CHECK\")) {\n            result.excludesGlobal.push(directive.toUpperCase())\n            break;\n        }\n    }\n\n    return result;\n}\n\nmodule.exports = {\n    isDisabledByInlineComment\n}"]}