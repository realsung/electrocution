{"version":3,"sources":["../../src/utils/file.js"],"names":["fs","require","dir","os","path","VER","version","getSample","fileLines","index","sample","trim","getRelativePath","targetFolder","filePath","is_directory","relative","dirname","writeIssues","root","isRelative","filename","result","isSarif","output","fileFlag","issues","$schema","runs","tool","driver","informationUri","name","fullName","rules","results","invocations","workingDirectory","uri","executionSuccessful","forEach","issue","id","undefined","push","fullDescription","text","description","properties","category","helpUri","help","ruleId","level","manualReview","message","locations","physicalLocation","artifactLocation","file","region","startLine","location","line","startColumn","column","charLength","length","JSON","stringify","writeCsvHeader","escapeCsv","severity","confidence","toString","EOL","writeFile","flag","err","module","exports"],"mappings":"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","file":"file.js","sourcesContent":["const fs = require(\"fs\");\nconst dir = require(\"node-dir\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst VER = require(\"../../package.json\").version;\n\n\n/**\n * \n * @param {Number} fileLines \n * @param {Number} index \n */\nfunction getSample(fileLines, index) {\n    let sample = fileLines[index];\n    sample = sample.trim();\n\n    return sample;\n}\n\n/**\n * \n * @param {String} targetFolder \n * @param {String || File} filePath \n */\nfunction getRelativePath(targetFolder, filePath) {\n    if (filePath === \"N/A\")\n      return filePath;\n    if (is_directory(targetFolder))\n      return path.relative(targetFolder, filePath);\n    else \n      return path.relative(path.dirname(targetFolder), filePath);\n}\n\n/**\n * \n * @param {any} root \n * @param {String} isRelative \n * @param {FileList} filename \n * @param {String} result \n * @param {Object || any} isSarif \n */\nfunction writeIssues(root, isRelative, filename, result, isSarif){\n    let output = '';\n    let fileFlag = 'w';\n  \n    if (isSarif) {\n      let issues =\n      {\n        $schema: \"http://json.schemastore.org/sarif-2.1.0\",\n        version: \"2.1.0\",\n        runs: [\n          {\n            tool: {\n              driver: {\n                version: `${VER}`,\n                informationUri: \"https://github.com/doyensec/electronegativity\",\n                name: \"Electronegativity\",\n                fullName: \"Electronegativity is a tool to identify misconfigurations and security anti-patterns in Electron applications\",\n                rules: []\n              }\n            },\n            results: []\n          }\n        ]\n      };\n  \n      if (isRelative) {\n        issues.runs[0].invocations = [\n          {\n            workingDirectory: {\n              uri: `file:///${root}`\n            },\n            executionSuccessful: true\n          },\n        ];\n      }\n  \n      result.forEach(issue => {\n        if (issues.runs[0].tool.driver.rules[issue.id] === undefined) {\n          issues.runs[0].tool.driver.rules.push({\n            id: issue.id,\n            fullDescription: {\n              text: issue.description\n            },\n            properties: {\n              category: \"Security\"\n            },\n            helpUri: `https://github.com/doyensec/electronegativity/wiki/${issue.id}`,\n            help: {\n              text: `https://github.com/doyensec/electronegativity/wiki/${issue.id}`\n            }\n          });\n          issues.runs[0].tool.driver.rules[issue.id] = true;\n        }\n  \n        let result = {\n          ruleId: issue.id,\n          level: `${issue.manualReview ? 'note' : 'warning'}`,\n          message: {\n            text: issue.description\n          }\n        };\n  \n        result.locations = [\n          {\n            physicalLocation: {\n              artifactLocation: {\n                uri: issue.file !== \"N/A\" ? issue.file : \"file:///\"\n              },\n              region: {\n                startLine: issue.location && issue.location.line !== undefined ? (issue.location.line === 0 ? 1 : issue.location.line) : 1,\n                startColumn: issue.location && issue.location.column !== undefined ? issue.location.column + 1 : 1, \n                charLength: issue.sample ? issue.sample.length : 0\n              }\n            }\n          }\n        ];\n  \n        issues.runs[0].results.push(result);\n      });\n  \n      output = JSON.stringify(issues, null, 2);\n    }\n    else{\n      writeCsvHeader(filename);\n      fileFlag = 'a';\n      result.forEach(issue => {\n        output += [\n          issue.id,\n          escapeCsv(issue.severity.name),\n          escapeCsv(issue.confidence.name),\n          escapeCsv(issue.file),\n          escapeCsv(`${issue.location.line}:${issue.location.column}`),\n          escapeCsv(issue.sample),\n          escapeCsv(issue.description),\n          `https://github.com/doyensec/electronegativity/wiki/${issue.id}`\n        ].toString();\n        output += os.EOL;\n      });\n    }\n  \n    fs.writeFile(filename, output, { flag: fileFlag }, (err) => {\n      if(err) throw err;\n    });\n}\n\n\nmodule.exports = {\n    getSample,\n    getRelativePath,\n    writeIssues,\n}\n"]}