{"version":3,"sources":["../../../../src/find/checks/GlobalChecks/AvailableSecurityFixesGlobalCheck.js"],"names":["fs","satisfies","major","minor","got","chalk","path","tempDirectory","severity","confidence","AvailableSecurityFixesGlobalCheck","constructor","id","description","SECURITY_ISSUES","OUTDATED_VERSION","depends","shortenedURL","releaseNoteSecurityFixRegex","githubEtagRegex","releasesFilePath","require","perform","issues","output","updateReleasesList","versionCheckIssues","filter","e","otherIssues","releases","latestRelease","releasesFileName","readdirSync","fn","startsWith","length","rawReleasesFile","readFileSync","resolve","JSON","parse","a","npm_dist_tags","version","issue","properties","versionNumber","confidenceIfSecurityFixAvailable","checkSecurityFixes","manualReview","push","file","location","line","column","INFORMATIONAL","HIGH","majorVersion","minorVersion","family","release","console","log","yellow","TENTATIVE","semverTarget","followingReleases","securityFixes","regex","test","body","CERTAIN","shouldUpdate","ElectronReleaseData","remoteEtag","localEtag","releaseFile","head","rawRemoteEtag","headers","etag","match","split","values","unlinkSync","join","green","responseType","latest","tag_name","outputFileContent","essentialInfo","writeFileSync","stringify"],"mappings":"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","file":"AvailableSecurityFixesGlobalCheck.js","sourcesContent":["import fs from 'fs';\nimport { satisfies, major, minor } from 'semver';\nimport got from 'got';\nimport chalk from 'chalk';\nimport path from 'path'\nimport tempDirectory from 'temp-dir';\nimport { severity, confidence } from '../../attributes';\n\nexport default class AvailableSecurityFixesGlobalCheck {\n\n  constructor() {\n    this.id = \"AVAILABLE_SECURITY_FIXES_GLOBAL_CHECK\";\n    this.description = { SECURITY_ISSUES : \"Check if there are security patches applied in between the Electron version used and the latest\",\n      OUTDATED_VERSION : \"A new version of Electron is available\" };\n    this.depends = [\"ElectronVersionJSONCheck\"];\n    this.shortenedURL = \"https://git.io/Jeu1X\";\n    this.releaseNoteSecurityFixRegex = [ /# Security/i, /\\[security\\]/i ];\n    this.githubEtagRegex = /[0-9a-f]{40}/g;\n    this.releasesFilePath = require('temp-dir');\n  }\n\n  async perform(issues, output) {\n\n    await this.updateReleasesList(output);\n\n    var versionCheckIssues = issues.filter(e => e.id === 'ELECTRON_VERSION_JSON_CHECK');\n    var otherIssues = issues.filter(e => e.id !== 'ELECTRON_VERSION_JSON_CHECK');\n\n    var releases;\n    var latestRelease;\n    var releasesFileName = fs.readdirSync(this.releasesFilePath).filter(fn => fn.startsWith('releases.'));\n\n    if (versionCheckIssues.length > 0 && releasesFileName.length > 0) {\n      var rawReleasesFile = fs.readFileSync(path.resolve(this.releasesFilePath, releasesFileName[0]));\n      releases = JSON.parse(rawReleasesFile);\n      latestRelease = releases.filter(a => a.npm_dist_tags[0] === \"latest\")[0].version;\n\n      for (const issue of versionCheckIssues) {\n        if (issue.properties.versionNumber !== latestRelease) {\n          var confidenceIfSecurityFixAvailable = await this.checkSecurityFixes(issue.properties.versionNumber, releases);\n          if (confidenceIfSecurityFixAvailable) {\n            if (issue.manualReview) // found in devDependencies\n              otherIssues.push({ file: versionCheckIssues[0].file, location: {line: 0, column: 0}, id: this.id, description: this.description.SECURITY_ISSUES, shortenedURL: this.shortenedURL, severity: severity.INFORMATIONAL, confidence: confidenceIfSecurityFixAvailable, manualReview: issue.manualReview });\n            else // found in dependencies\n              otherIssues.push({ file: versionCheckIssues[0].file, location: {line: 0, column: 0}, id: this.id, description: this.description.SECURITY_ISSUES, shortenedURL: this.shortenedURL, severity: severity.HIGH, confidence: confidenceIfSecurityFixAvailable, manualReview: issue.manualReview });\n          }\n        }\n      }\n    }\n    return otherIssues;\n  }\n\n  async checkSecurityFixes(version, releases) {\n    const majorVersion = major(version);\n    const minorVersion = minor(version);\n    const family = `${majorVersion}.${minorVersion}.x`;\n\n    var latestRelease = releases.filter(release => satisfies(release.version, family))[0];\n    if(!latestRelease) {\n      console.log(chalk.yellow(`Unknown Electron release \"${family}\", please check manually for available security fixes.`));\n      return confidence.TENTATIVE;\n    }\n\n    const semverTarget = `>${version} <=${latestRelease.version}`;\n    var followingReleases = releases.filter(release => satisfies(release.version, semverTarget));\n    var securityFixes = false;\n    for (let release of followingReleases) {\n      for (let regex of this.releaseNoteSecurityFixRegex)\n        if (regex.test(release.body))\n          securityFixes = confidence.CERTAIN;\n    }\n    return securityFixes;\n  }\n\n\n  async updateReleasesList(output) {\n\n    var shouldUpdate = false;\n    var ElectronReleaseData;\n    var remoteEtag;\n    var localEtag;\n\n\n    if (!shouldUpdate) {\n      var releaseFile = fs.readdirSync(this.releasesFilePath).filter(fn => fn.startsWith('releases.'));\n      if (releaseFile.length > 0) { // file exists, we should check the etag\n        try {\n          ElectronReleaseData = await got.head('https://raw.githubusercontent.com/electron/releases/master/index.json');\n        } catch (e) {\n          console.log(chalk.yellow(`Something went wrong while fetching Electron's releases. No connectivity?`));\n          return false;\n        }\n        var rawRemoteEtag = ElectronReleaseData.headers.etag;\n        remoteEtag = rawRemoteEtag.match(this.githubEtagRegex);\n        if (remoteEtag == null) {\n          console.log(chalk.yellow(`Something went wrong while fetching Electron's releases. Etag returned from Github was not recognized.`));\n          return false;\n        } else remoteEtag = remoteEtag[0];\n        localEtag = releaseFile[0].split('.')[1];\n\n        //check if it corresponds to our local version\n        if (localEtag === remoteEtag)\n          shouldUpdate = false;\n        else {\n          shouldUpdate = true;\n          //remove the old releases.json file(s)\n          try {\n            for (let file of releaseFile.values())\n              fs.unlinkSync(path.join(this.releasesFilePath, file));\n          } catch (e) {\n            console.log(chalk.yellow(`Something went wrong while trying to delete Electron's releases.`));\n            console.log(e)\n          }\n        }\n\n      } else {\n        shouldUpdate = true;\n      }\n    }\n\n    if (shouldUpdate) {\n      if (!output)\n        console.log(chalk.green(`Fetching Electron's new releases, this may take a while...`));\n      try {\n        ElectronReleaseData = await got('https://raw.githubusercontent.com/electron/releases/master/index.json', { responseType: 'json' });\n      } catch (e) {\n        console.log(chalk.yellow(`Something went wrong while fetching Electron's releases. No connectivity?`));\n        return false;\n      }\n      var latest = ElectronReleaseData.body.filter(a => a.npm_dist_tags[0] === \"latest\")[0].tag_name;\n      var rawRemoteEtag = ElectronReleaseData.headers.etag;\n      remoteEtag = rawRemoteEtag.match(this.githubEtagRegex);\n      if (remoteEtag == null) {\n          console.log(chalk.yellow(`Something went wrong while fetching Electron's releases. Etag returned from Github was not recognized.`));\n          return false;\n      } else remoteEtag = remoteEtag[0];\n      var outputFileContent = [];\n      for (let release of ElectronReleaseData.body) {\n        let essentialInfo = {};\n        essentialInfo.tag_name = release.tag_name;\n        essentialInfo.version = release.version;\n        essentialInfo.body = release.body;\n        essentialInfo.npm_dist_tags = release.npm_dist_tags;\n        outputFileContent.push(essentialInfo);\n      }\n      fs.writeFileSync(path.resolve(this.releasesFilePath, 'releases.'+remoteEtag+'.json'), JSON.stringify(outputFileContent, null, 1));\n      if (!output)\n        console.log(chalk.green(`Updated releases list to ${latest}!`));\n      return true;\n    } else {\n      if (!output)\n        console.log(chalk.green(`Releases list is up to date.`));\n    }\n  }\n\n\n}\n"]}