{"version":3,"sources":["../../../../src/find/checks/AtomicChecks/NodeIntegrationJSCheck.js"],"names":["sourceTypes","severity","confidence","NodeIntegrationJSCheck","constructor","id","description","type","JAVASCRIPT","shortenedURL","match","astNode","astHelper","scope","defaults","callee","name","nodeIntegrationFound","locations","arguments","length","target","resolveVarValue","loc","findNode","value","sandboxLoc","sandboxFound","concat","nodeIntegration","push","line","start","column","HIGH","FIRM","manualReview","startNode","skipCondition","found","nodeIntegrationStrings","nodes","findNodeByType","PropertyName","PropertyDepth","node","key","needsManualReview","operator","argument","eval","includes","INFORMATIONAL"],"mappings":"AAAA,SAASA,WAAT,QAA4B,uBAA5B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,kBAArC;;AAEA,eAAe,MAAMC,sBAAN,CAA6B;AAC1CC,gBAAc;AACZ,SAAKC,EAAL,GAAU,2BAAV;AACA,SAAKC,WAAL,GAAoB,+CAApB;AACA,SAAKC,IAAL,GAAYP,YAAYQ,UAAxB;AACA,SAAKC,YAAL,GAAoB,sBAApB;AACD;;AAED;AACA;AACA;;AAEAC,QAAMC,OAAN,EAAeC,SAAf,EAA0BC,KAA1B,EAAiCC,QAAjC,EAA0C;AACxC,QAAIH,QAAQJ,IAAR,KAAiB,eAArB,EAAsC,OAAO,IAAP;AACtC,QAAII,QAAQI,MAAR,CAAeC,IAAf,KAAwB,eAAxB,IAA2CL,QAAQI,MAAR,CAAeC,IAAf,KAAwB,aAAvE,EAAsF,OAAO,IAAP;;AAEtF,QAAIC,uBAAuB,KAA3B;AACA,QAAIC,YAAY,EAAhB;AACA,QAAIP,QAAQQ,SAAR,CAAkBC,MAAlB,GAA2B,CAA/B,EAAkC;;AAEhC,UAAIC,SAASR,MAAMS,eAAN,CAAsBX,OAAtB,CAAb;;AAEA,UAAIY,MAAM,EAAV;;AAEAN,6BAAuB,KAAKO,QAAL,CAAcZ,SAAd,EAAyBS,MAAzB,EAAiC,iBAAjC,EAAoDI,SAASA,UAAU,KAAvE,EAA8EF,GAA9E,CAAvB;AACA;AACA;AACA,WAAKC,QAAL,CAAcZ,SAAd,EAAyBS,MAAzB,EAAiC,yBAAjC,EAA4DI,SAASA,UAAU,IAA/E,EAAqFF,GAArF;AACA,WAAKC,QAAL,CAAcZ,SAAd,EAAyBS,MAAzB,EAAiC,4BAAjC,EAA+DI,SAASA,UAAU,IAAlF,EAAwFF,GAAxF;;AAEA,UAAIG,aAAa,EAAjB;AACA,UAAIC,eAAe,KAAKH,QAAL,CAAcZ,SAAd,EAAyBS,MAAzB,EAAiC,SAAjC,EAA4CI,SAASA,UAAU,IAA/D,EAAqEC,UAArE,CAAnB;AACA,UAAI,CAACC,YAAD,IAAiBD,WAAWN,MAAX,IAAqB,CAA1C,EAA6C;AAC3CF,oBAAYA,UAAUU,MAAV,CAAiBL,GAAjB,CAAZ;AACH;;AAED,QAAI,CAACN,oBAAD,IAAyBH,SAASe,eAAtC,EAAuD;AACrDX,gBAAUY,IAAV,CAAe,EAAEC,MAAMpB,QAAQY,GAAR,CAAYS,KAAZ,CAAkBD,IAA1B,EAAgCE,QAAQtB,QAAQY,GAAR,CAAYS,KAAZ,CAAkBC,MAA1D,EAAkE5B,IAAI,KAAKA,EAA3E,EAA+EC,aAAa,KAAKA,WAAjG,EAA8GG,cAAc,KAAKA,YAAjI,EAA+IR,UAAUA,SAASiC,IAAlK,EAAwKhC,YAAYA,WAAWiC,IAA/L,EAAqMC,cAAc,KAAnN,EAAf;AACD;;AAED,WAAOlB,SAAP;AACD;;AAEDM,WAASZ,SAAT,EAAoByB,SAApB,EAA+BrB,IAA/B,EAAqCsB,aAArC,EAAoDpB,SAApD,EAA+D;AAC7D,QAAIqB,QAAQ,KAAZ;AACA,QAAIC,yBAAyB,CAAC,iBAAD,EAAmB,yBAAnB,EAA6C,4BAA7C,CAA7B;AACA,UAAMC,QAAQ7B,UAAU8B,cAAV,CAAyBL,SAAzB,EAAoCzB,UAAU+B,YAA9C,EAA4D/B,UAAUgC,aAAtE,EAAqF,KAArF,EAA4FC,QAAQ;AAChH,aAAOA,KAAKC,GAAL,CAASrB,KAAT,KAAmBT,IAAnB,IAA2B6B,KAAKC,GAAL,CAAS9B,IAAT,KAAkBA,IAApD;AACD,KAFa,CAAd;;AAIA,SAAK,MAAM6B,IAAX,IAAmBJ,KAAnB,EAA0B;AACxB;AACA;AACA;AACAF,cAAQ,IAAR;AACA,UAAIQ,iBAAJ;;AAGA,UAAIF,KAAKpB,KAAL,CAAWlB,IAAX,KAAoB,YAAxB,EAAsC;AACpCwC,4BAAoB,IAApB,CADF,KAEK,IAAIF,KAAKpB,KAAL,CAAWlB,IAAX,KAAoB,iBAAxB,EAA4C;AAAC;AAChD,YAAIsC,KAAKpB,KAAL,CAAWuB,QAAX,IAAuB,GAAvB,IAA8B,OAAOH,KAAKpB,KAAL,CAAWwB,QAAX,CAAoBxB,KAA3B,KAAqC,QAAvE;AAAiF;AAC/E,gBAAIyB,KAAKL,KAAKpB,KAAL,CAAWuB,QAAX,GAAoBH,KAAKpB,KAAL,CAAWwB,QAAX,CAAoBxB,KAA7C,CAAJ,EACEsB,oBAAoB,KAApB,CADF,CAC6B;AAD7B,iBAGE,SAJJ,CAIc;;AAJd,eAMEA,oBAAoB,IAApB;AACH,OARI,MAUHA,oBAAoB,KAApB;;AAEF,UAAIT,cAAcO,KAAKpB,KAAL,CAAWA,KAAzB,CAAJ,EAAoC;AAClC,YAAI,CAACoB,KAAKC,GAAL,CAASrB,KAAT,KAAmB,SAAnB,IAAgCoB,KAAKC,GAAL,CAAS9B,IAAT,KAAkB,SAAnD,KAAiE+B,iBAArE,EAAwF;AACxF,YAAI,CAACP,uBAAuBW,QAAvB,CAAgCN,KAAKC,GAAL,CAASrB,KAAzC,KAAmDe,uBAAuBW,QAAvB,CAAgCN,KAAKC,GAAL,CAAS9B,IAAzC,CAApD,KAAuG,CAAC+B,iBAA5G,EAA+H;AAChI;;AAED7B,gBAAUY,IAAV,CAAe;AACbC,cAAMc,KAAKC,GAAL,CAASvB,GAAT,CAAaS,KAAb,CAAmBD,IADZ;AAEbE,gBAAQY,KAAKC,GAAL,CAASvB,GAAT,CAAaS,KAAb,CAAmBC,MAFd;AAGb5B,YAAI,KAAKA,EAHI;AAIbC,qBAAa,KAAKA,WAJL;AAKbG,sBAAc,KAAKA,YALN;AAMbR,kBAAUA,SAASmD,aANN;AAOblD,oBAAYA,WAAWiC,IAPV;AAQbC,sBAAcW;AARD,OAAf;AAUD;;AAED,WAAOR,KAAP;AACD;AA1FyC","file":"NodeIntegrationJSCheck.js","sourcesContent":["import { sourceTypes } from '../../../parser/types';\nimport { severity, confidence } from '../../attributes';\n\nexport default class NodeIntegrationJSCheck {\n  constructor() {\n    this.id = 'NODE_INTEGRATION_JS_CHECK';\n    this.description = `Disable nodeIntegration for untrusted origins`;\n    this.type = sourceTypes.JAVASCRIPT;\n    this.shortenedURL = \"https://git.io/JeuMn\";\n  }\n\n  //nodeIntegration Boolean (optional) - Whether node integration is enabled. Default is true.\n  //nodeIntegrationInWorker Boolean (optional) - Whether node integration is enabled in web workers. Default is false\n  //nodeIntegrationInSubFrames Boolean (optional) - Whether node integration is enabled in in sub-frames such as iframes. Default is false\n\n  match(astNode, astHelper, scope, defaults){\n    if (astNode.type !== 'NewExpression') return null;\n    if (astNode.callee.name !== 'BrowserWindow' && astNode.callee.name !== 'BrowserView') return null;\n\n    let nodeIntegrationFound = false;\n    let locations = [];\n    if (astNode.arguments.length > 0) {\n\n      var target = scope.resolveVarValue(astNode);\n\n      let loc = [];\n\n      nodeIntegrationFound = this.findNode(astHelper, target, 'nodeIntegration', value => value === false, loc);\n      // nodeIntegrationInWorker default value is safe, as well as nodeIntegrationInSubFrames\n      // so no check for return value (don't care if it was found)\n      this.findNode(astHelper, target, 'nodeIntegrationInWorker', value => value !== true, loc);\n      this.findNode(astHelper, target, 'nodeIntegrationInSubFrames', value => value !== true, loc);\n\n      let sandboxLoc = [];\n      let sandboxFound = this.findNode(astHelper, target, 'sandbox', value => value !== true, sandboxLoc);\n      if (!sandboxFound || sandboxLoc.length <= 0) // sandbox disables node integration\n        locations = locations.concat(loc);\n    }\n\n    if (!nodeIntegrationFound && defaults.nodeIntegration) {\n      locations.push({ line: astNode.loc.start.line, column: astNode.loc.start.column, id: this.id, description: this.description, shortenedURL: this.shortenedURL, severity: severity.HIGH, confidence: confidence.FIRM, manualReview: false });\n    }\n\n    return locations;\n  }\n\n  findNode(astHelper, startNode, name, skipCondition, locations) {\n    let found = false;\n    var nodeIntegrationStrings = [\"nodeIntegration\",\"nodeIntegrationInWorker\",\"nodeIntegrationInSubFrames\"];\n    const nodes = astHelper.findNodeByType(startNode, astHelper.PropertyName, astHelper.PropertyDepth, false, node => {\n      return node.key.value === name || node.key.name === name;\n    });\n\n    for (const node of nodes) {\n      // in practice if there are two keys with the same name, the value of the last one wins\n      // but technically it is an invalid json\n      // just to be on the safe side show a warning if any value is insecure\n      found = true;\n      let needsManualReview;\n\n      \n      if (node.value.type === \"Identifier\") // it's a variable, needs manual review since it's probably a custom webpreferences object\n        needsManualReview = true;\n      else if (node.value.type === \"UnaryExpression\")  {// it's a !0 || !1 unary expression. \n        if (node.value.operator == \"!\" && typeof node.value.argument.value === \"number\") // if it's more complicated (e.g. !!!1), report for manual review and treat as insecure\n          if (eval(node.value.operator+node.value.argument.value))\n            needsManualReview = false; // it's truthy, so it's enabled\n          else\n            continue; //it's falsy, so it's disabled\n        else\n          needsManualReview = true;\n      }\n      else\n        needsManualReview = false;\n\n      if (skipCondition(node.value.value)){\n        if ((node.key.value === \"sandbox\" || node.key.name === \"sandbox\") && needsManualReview) continue;\n        if ((nodeIntegrationStrings.includes(node.key.value) || nodeIntegrationStrings.includes(node.key.name)) && !needsManualReview) continue;\n      }\n\n      locations.push({\n        line: node.key.loc.start.line,\n        column: node.key.loc.start.column,\n        id: this.id,\n        description: this.description,\n        shortenedURL: this.shortenedURL,\n        severity: severity.INFORMATIONAL,\n        confidence: confidence.FIRM,\n        manualReview: needsManualReview,\n      });\n    }\n\n    return found;\n  }\n}\n"]}