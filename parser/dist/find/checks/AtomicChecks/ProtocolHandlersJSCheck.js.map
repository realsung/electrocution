{"version":3,"sources":["../../../../src/find/checks/AtomicChecks/ProtocolHandlersJSCheck.js"],"names":["sourceTypes","severity","confidence","ProtocolHandlerJSCheck","constructor","id","description","type","JAVASCRIPT","shortenedURL","match","astNode","methods","includes","callee","name","property","line","loc","start","column","MEDIUM","TENTATIVE","manualReview"],"mappings":"AAAA,SAASA,WAAT,QAA4B,uBAA5B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,kBAArC;;AAEA,eAAe,MAAMC,sBAAN,CAA6B;AAC1CC,gBAAc;AACZ,SAAKC,EAAL,GAAU,2BAAV;AACA,SAAKC,WAAL,GAAoB,4CAApB;AACA,SAAKC,IAAL,GAAYP,YAAYQ,UAAxB;AACA,SAAKC,YAAL,GAAoB,sBAApB;AACD;;AAEDC,QAAMC,OAAN,EAAc;AACZ,UAAMC,UAAU,CACd,4BADc,EAEd,yBAFc,EAGd,8BAHc,EAId,sBAJc,EAKd,sBALc,EAMd,wBANc,EAOd,wBAPc,EAQd,wBARc,CAAhB;;AAUA,QAAID,QAAQJ,IAAR,KAAiB,gBAArB,EAAuC,OAAO,IAAP;AACvC,QAAI,CAACK,QAAQC,QAAR,CAAiBF,QAAQG,MAAR,CAAeC,IAAhC,CAAD,IAA0C,EAAEJ,QAAQG,MAAR,CAAeE,QAAf,IAA2BJ,QAAQC,QAAR,CAAiBF,QAAQG,MAAR,CAAeE,QAAf,CAAwBD,IAAzC,CAA7B,CAA9C,EAA4H,OAAO,IAAP;;AAE5H,WAAO,CAAC,EAAEE,MAAMN,QAAQO,GAAR,CAAYC,KAAZ,CAAkBF,IAA1B,EAAgCG,QAAQT,QAAQO,GAAR,CAAYC,KAAZ,CAAkBC,MAA1D,EAAkEf,IAAI,KAAKA,EAA3E,EAA+EC,aAAa,KAAKA,WAAjG,EAA8GG,cAAc,KAAKA,YAAjI,EAA+IR,UAAUA,SAASoB,MAAlK,EAA0KnB,YAAYA,WAAWoB,SAAjM,EAA4MC,cAAc,IAA1N,EAAD,CAAP;AACD;AAvByC","file":"ProtocolHandlersJSCheck.js","sourcesContent":["import { sourceTypes } from '../../../parser/types';\nimport { severity, confidence } from '../../attributes';\n\nexport default class ProtocolHandlerJSCheck {\n  constructor() {\n    this.id = 'PROTOCOL_HANDLER_JS_CHECK';\n    this.description = `Review the use of custom protocol handlers`;\n    this.type = sourceTypes.JAVASCRIPT;\n    this.shortenedURL = \"https://git.io/JeuMz\";\n  }\n\n  match(astNode){\n    const methods = [\n      'setAsDefaultProtocolClient',\n      'registerStandardSchemes',\n      'registerServiceWorkerSchemes',\n      'registerFileProtocol',\n      'registerHttpProtocol',\n      'registerStringProtocol',\n      'registerBufferProtocol',\n      'registerStreamProtocol'];\n\n    if (astNode.type !== 'CallExpression') return null;\n    if (!methods.includes(astNode.callee.name) && !(astNode.callee.property && methods.includes(astNode.callee.property.name))) return null;\n\n    return [{ line: astNode.loc.start.line, column: astNode.loc.start.column, id: this.id, description: this.description, shortenedURL: this.shortenedURL, severity: severity.MEDIUM, confidence: confidence.TENTATIVE, manualReview: true }];\n  }\n}\n"]}