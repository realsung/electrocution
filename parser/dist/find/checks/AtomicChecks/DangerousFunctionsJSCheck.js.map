{"version":3,"sources":["../../../../src/find/checks/AtomicChecks/DangerousFunctionsJSCheck.js"],"names":["sourceTypes","severity","confidence","DangerousFunctionsJSCheck","constructor","id","description","type","JAVASCRIPT","shortenedURL","match","astNode","astHelper","scope","shouldReport","electronMethods","evalLikemethods","includes","callee","name","property","arguments","length","StringLiteral","target","resolveVarValue","line","loc","start","column","MEDIUM","CERTAIN","manualReview"],"mappings":"AAAA,SAASA,WAAT,QAA4B,uBAA5B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,kBAArC;;AAEA,eAAe,MAAMC,yBAAN,CAAgC;AAC7CC,gBAAc;AACZ,SAAKC,EAAL,GAAU,8BAAV;AACA,SAAKC,WAAL,GAAoB,2HAApB;AACA,SAAKC,IAAL,GAAYP,YAAYQ,UAAxB;AACA,SAAKC,YAAL,GAAoB,sBAApB;AACD;;AAEDC,QAAMC,OAAN,EAAeC,SAAf,EAA0BC,KAA1B,EAAgC;;AAE9B,QAAIC,eAAe,KAAnB;;AAEA,UAAMC,kBAAkB,CACtB,mBADsB,EAEtB,WAFsB,CAAxB;;AAIA,UAAMC,kBAAkB,CACtB,MADsB,EAEtB,UAFsB,EAGtB,YAHsB,EAItB,aAJsB,EAKtB,cALsB,CAAxB;;AAQA,QAAIL,QAAQJ,IAAR,KAAiB,gBAArB,EAAuC,OAAO,IAAP;;AAEvC;AACA,QAAIQ,gBAAgBE,QAAhB,CAAyBN,QAAQO,MAAR,CAAeC,IAAxC,KAAkDR,QAAQO,MAAR,CAAeE,QAAf,IAA2BL,gBAAgBE,QAAhB,CAAyBN,QAAQO,MAAR,CAAeE,QAAf,CAAwBD,IAAjD,CAAjF,EAA0I;AACxI,UAAIR,QAAQU,SAAR,CAAkBC,MAAlB,KAA6B,CAA7B,IAAkCX,QAAQU,SAAR,CAAkB,CAAlB,EAAqBd,IAArB,KAA8BK,UAAUW,aAA9E,EAA6F,OAAO,IAAP,CAD2C,CAC9B;;AAE1GT,qBAAe,IAAf,CAHwI,CAGnH;AACtB;;AAED;AACA,QAAIE,gBAAgBC,QAAhB,CAAyBN,QAAQO,MAAR,CAAeC,IAAxC,KAAkDR,QAAQO,MAAR,CAAeE,QAAf,IAA2BJ,gBAAgBC,QAAhB,CAAyBN,QAAQO,MAAR,CAAeE,QAAf,CAAwBD,IAAjD,CAAjF,EAA0I;AACxI,UAAIR,QAAQU,SAAR,CAAkBC,MAAlB,KAA6B,CAA7B,IAAkCX,QAAQU,SAAR,CAAkB,CAAlB,EAAqBd,IAArB,KAA8BK,UAAUW,aAA9E,EAA6F,OAAO,IAAP,CAD2C,CAC9B;AAC1G,UAAIZ,QAAQU,SAAR,CAAkB,CAAlB,EAAqBd,IAArB,KAA8B,kBAAlC,EAAsDO,eAAe,IAAf,CAFkF,CAE7D;;AAE3E,UAAIH,QAAQU,SAAR,CAAkB,CAAlB,EAAqBd,IAArB,KAA8B,YAAlC,EAAgD;AAAE;AAC/C;AACC,YAAIiB,SAASX,MAAMY,eAAN,CAAsBd,OAAtB,CAAb;;AAEA,YAAIa,WAAW,IAAf,EAAqB;AACnBV,yBAAe,IAAf,CADF,KAEK,IAAIU,WAAWA,OAAOjB,IAAP,KAAgB,kBAAhB,IAAsCiB,OAAOjB,IAAP,CAAYU,QAAZ,CAAqBL,UAAUW,aAA/B,CAAjD,CAAJ,EAAqG;AACxGT,yBAAe,IAAf,CADG,KAEA;AACHA,yBAAe,KAAf;AACL;AACF;;AAED,QAAIA,YAAJ,EACE,OAAO,CAAC,EAAEY,MAAMf,QAAQgB,GAAR,CAAYC,KAAZ,CAAkBF,IAA1B,EAAgCG,QAAQlB,QAAQgB,GAAR,CAAYC,KAAZ,CAAkBC,MAA1D,EAAkExB,IAAI,KAAKA,EAA3E,EAA+EC,aAAa,KAAKA,WAAjG,EAA8GG,cAAc,KAAKA,YAAjI,EAA+IR,UAAUA,SAAS6B,MAAlK,EAA0K5B,YAAYA,WAAW6B,OAAjM,EAA0MC,cAAc,IAAxN,EAAD,CAAP;AACH;AArD4C","file":"DangerousFunctionsJSCheck.js","sourcesContent":["import { sourceTypes } from '../../../parser/types';\nimport { severity, confidence } from '../../attributes';\n\nexport default class DangerousFunctionsJSCheck {\n  constructor() {\n    this.id = 'DANGEROUS_FUNCTIONS_JS_CHECK';\n    this.description = `Do not use insertCSS, executeJavaScript, eval, Function, setTimeout, setInterval, setImmediate with user-supplied content`;\n    this.type = sourceTypes.JAVASCRIPT;\n    this.shortenedURL = \"https://git.io/Jeug9\";\n  }\n\n  match(astNode, astHelper, scope){\n\n    let shouldReport = false;\n\n    const electronMethods = [\n      'executeJavascript',\n      'insertCSS'];\n\n    const evalLikemethods = [\n      'eval',\n      'Function',\n      'setTimeout',\n      'setInterval',\n      'setImmediate',\n      ];\n\n    if (astNode.type !== 'CallExpression') return null;\n\n    // it's an electron-specific method\n    if (electronMethods.includes(astNode.callee.name) || (astNode.callee.property && electronMethods.includes(astNode.callee.property.name))) {\n      if (astNode.arguments.length === 0 || astNode.arguments[0].type === astHelper.StringLiteral) return null; //if it's a constant or is called empty\n      \n      shouldReport = true; // always interesting\n    }\n\n    // it's a dangerous js function\n    if (evalLikemethods.includes(astNode.callee.name) || (astNode.callee.property && evalLikemethods.includes(astNode.callee.property.name))) {\n      if (astNode.arguments.length === 0 || astNode.arguments[0].type === astHelper.StringLiteral) return null; //if it's a constant or is called empty\n      if (astNode.arguments[0].type === \"BinaryExpression\") shouldReport = true; // if it's a string concatenation\n\n      if (astNode.arguments[0].type === \"Identifier\") { // is it a variable?\n         // if it is a variable we check its type\n          var target = scope.resolveVarValue(astNode);\n\n          if (target === null) // we could not resolve the variable, let the user check\n            shouldReport = true;\n          else if (target && (target.type === \"BinaryExpression\" || target.type.includes(astHelper.StringLiteral))) // check if we are facing a string concatenation, a plain string or template literal (e.g. ${var})\n            shouldReport = true;\n          else // it's probably of little interest\n            shouldReport = false;\n      }\n    }\n\n    if (shouldReport)\n      return [{ line: astNode.loc.start.line, column: astNode.loc.start.column, id: this.id, description: this.description, shortenedURL: this.shortenedURL, severity: severity.MEDIUM, confidence: confidence.CERTAIN, manualReview: true }];\n  }\n}\n"]}