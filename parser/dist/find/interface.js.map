{"version":3,"sources":["../../src/find/interface.js"],"names":["escope","require","Ast","constructor","settings","findNodeByType","ast","type","max_depth","stopAtFirst","found","cb","findNode","node","PropertyName","StringLiteral","PropertyDepth","TreeSettings","propertyname","stringLiteral","propertyDepth","Scope","test","_scopeManager","_globalScope","_functionScope","analyze","error","ecmaVersion","sourceType","ecmaFeatures","modules","acquire","scopeManager","globalScope","functionScope","updateFunctionScope","action","Object","keys","length","upper","getVarInScope","varName","res","variables","find","variable","name","resolveVarValue","astNode","arguments","target","defs","init","module","exports"],"mappings":"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","file":"interface.js","sourcesContent":["\n\nconst escope = require('escope');\n\nclass Ast {\n  constructor(settings) {\n    this.settings = settings;\n  }\n\n  findNodeByType(ast, type, max_depth, stopAtFirst, found) {\n    const cb = found;\n    return this.findNode(ast, max_depth, stopAtFirst, (node) => {\n      if ((node.type === type) && cb(node)) {\n        return true;\n      }\n    });\n  }\n\n  PropertyName() { return this.settings.PropertyName; }\n  StringLiteral() { return this.settings.StringLiteral; }\n  PropertyDepth() { return this.settings.PropertyDepth; }\n}\n\nclass TreeSettings {\n  constructor({ propertyname = 'Property', stringLiteral = 'Literal', propertyDepth = 4 } = {}) {\n    this.propertyname = propertyname;\n    this.StringLiteral = stringLiteral;\n    this.PropertyDepth = propertyDepth;\n  }\n}\n\nclass Scope {\n  constructor(ast) {\n    if (/Program|File/.test(ast.type)) {\n      var _scopeManager = {};\n      var _globalScope = {};\n      var _functionScope = {};\n      try {\n        _scopeManager = escope.analyze(ast);\n      }\n      catch (error) {\n        _scopeManager = escope.analyze(ast, { ecmaVersion: 6, sourceType: \"module\", ecmaFeatures: { modules: true } });\n      }\n\n      _globalScope = _scopeManager.acquire(ast);\n      _functionScope = _globalScope;\n\n      this.scopeManager = _scopeManager;\n      this.globalScope = _globalScope;\n      this.functionScope = _functionScope;\n    }\n  }\n\n  updateFunctionScope(ast, action) {\n    if (Object.keys(this.scopeManager).length > 0 && this.scopeManager.acquire(ast) != null) {\n      if (action === 'enter')\n        this.functionScope = this.scopeManager.acquire(ast);\n      else if (this.functionScope.upper != null)\n        this.functionScope = this.functionScope.upper;\n    }\n  }\n\n  getVarInScope(varName) {\n    var res = this.functionScope.variables.find(variable => variable.name === varName);\n    if (res) return res;\n    else {\n      res = this.globalScope.variables.find(variable => variable.name === varName);\n      if (res)\n        return res;\n      else\n        return null;\n    }\n  }\n\n  resolveVarValue(astNode) {\n    if (astNode.arguments[0].type !== \"Identifier\")\n      return astNode.arguments[0];\n    else {\n      var target = this.getVarInScope(astNode.arguments[0].name);\n      if (target != null) {\n        target = target.defs[0].node.init;\n        return target;\n      } else {\n        return astNode.arguments[0];\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  Ast,\n  TreeSettings,\n  Scope\n}"]}