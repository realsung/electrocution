{"version":3,"sources":["../../src/find/ast.js"],"names":["traverse","require","estraverse","ESLintTraverser","escope","Ast","EsprimaAst","constructor","settings","traverseTree","tree","options","getNode","node","findNode","ast","max_depth","stopAtFirst","found","nodes","depth","enter","push","VisitorOption","Break","Error","Skip","leave","BabelAst","shouldStop","noScope","stop","skip","exit","ESLintAst","esLintTraverser","findNodeByTypeParent","type","findNodeByType","break","module","exports"],"mappings":"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","file":"ast.js","sourcesContent":["const traverse = require(\"@babel/traverse\");\nconst estraverse = require(\"estraverse-fb\");\nconst ESLintTraverser = require('eslint/lib/shared/traverser');\nconst escope = require('escope');\nconst { Ast } = require(\"./interface\");\n\nclass EsprimaAst extends Ast {\n    constructor(settings) {\n      super(settings);\n    }\n  \n    traverseTree(tree, options) {\n      estraverse.traverse(tree, options);\n    }\n  \n    getNode(node) {\n      return node;\n    }\n  \n    findNode(ast, max_depth, stopAtFirst, found) {\n      const nodes = [];\n      let depth = 0;\n      estraverse.traverse(ast, {\n        enter: (node) => {\n          depth += 1;\n          if (found(node)) {\n            nodes.push(node);\n            if (stopAtFirst)\n              return estraverse.VisitorOption.Break;\n          }\n          if (max_depth > 0) {\n            if (depth > max_depth)\n              throw new Error('Traversal error'); \n  \n            if (depth === max_depth)\n              return estraverse.VisitorOption.Skip;\n          }\n        },\n        leave: () => {\n          depth -= 1;\n        },\n      });\n      return nodes;\n    }\n  }\n  \nclass BabelAst extends Ast {\nconstructor(settings) {\n    super(settings);\n}\n\ntraverseTree(tree, options) {\n    traverse(tree, options);\n}\n\ngetNode(node) {\n    return node.node;\n}\n\nfindNode(ast, max_depth, stopAtFirst, found) {\n        const nodes = [];\n        let depth = 0;\n        let shouldStop = false;\n        traverse(ast, {\n        noScope: true,\n        enter: (node) => {\n            depth += 1;\n            if (found(this.getNode(node))) {\n            nodes.push(this.getNode(node));\n            if (stopAtFirst) {\n                shouldStop = true;\n                node.stop();\n                return;\n            }\n            }\n            if (max_depth > 0) {\n            if (depth > max_depth)\n                throw new Error('Traversal error'); \n\n            if (depth === max_depth) {\n                node.skip();\n                depth -= 1; \n            }\n            }\n        },\n        exit: (node) => {\n            depth -= 1;\n            if (shouldStop)\n            node.stop();\n        },\n        });\n        return nodes;\n    }\n}\n\nclass ESLintAst extends Ast {\n    constructor(settings) {\n        super(settings);\n        this.esLintTraverser = new ESLintTraverser();\n    }\n\n    findNodeByTypeParent(ast, type, max_depth, stopAtFirst, found) {\n        return super.findNodeByType(ast, type, max_depth, stopAtFirst, found);\n    }\n\n    findNodeByType(ast, type, max_depth, stopAtFirst, found) {\n        return new ESLintAst(this.settings).findNodeByTypeParent(ast, type, max_depth, stopAtFirst, found);\n    }\n\n    traverseTree(tree, options) {\n        this.esLintTraverser.traverse(tree, options);\n    }\n\n    getNode(node) {\n        return node;\n    }\n\n    findNode(ast, max_depth, stopAtFirst, found) {\n        const nodes = [];\n        let depth = 0;\n        this.esLintTraverser.traverse(ast, {\n        enter: (node) => {\n            if (max_depth > 0) {\n            if (depth === max_depth) {\n                this.esLintTraverser.skip();\n                return;\n            }\n            if (depth > max_depth)\n                throw new Error('Traversal error'); \n            }\n\n            depth += 1;\n            if (found(this.getNode(node))) {\n            nodes.push(this.getNode(node));\n            if (stopAtFirst) {\n                this.esLintTraverser.break();\n                return;\n            }\n            }\n        },\n        leave: () => {\n            depth -= 1;\n        },\n        });\n        return nodes;\n    }\n}\n\nmodule.exports = {\n    EsprimaAst,\n    BabelAst,\n    ESLintAst\n}"]}