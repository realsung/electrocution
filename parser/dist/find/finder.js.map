{"version":3,"sources":["../../src/find/finder.js"],"names":["Type","require","getSample","chalk","gte","compare","Finder","constructor","customScan","excludeFromScan","electronUpgrade","candidateChecks","Array","from","CHECKS","currentVersion","targetVersion","split","Object","keys","ELECTRON_ATOMIC_UPGRADE_CHECKS","forEach","versionToCheck","concat","console","error","red","process","exit","_enabled_checks","assign","create","length","checksNames","map","check","name","toLowerCase","every","r","includes","i","splice","_checks_by_type","Map","init_checks_list","enabled_checks","checks_by_type","type","set","checkInstance","get","push","find","file","data","content","use_only_checks","electronVersion","all_defaults","version_of_last_default_change","sort","a","b","reverse","current_version","defaults","checks","filter","id","fileLines","toString","issues","rootData","JAVASCRIPT","astParser","traverseTree","enter","node","Scope","updateFunctionScope","getNode","matches","match","m","firstLineSample","matchedLineSample","line","visibility","isDisabledByInlineComment","issue","sample","location","column","description","properties","severity","confidence","manualReview","shortenedURL","constructorName","leave","HTML","JSON","excludesGlobal","inlineDisabled","globalDisabled","globalCheckDisabled","module","exports"],"mappings":"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","file":"finder.js","sourcesContent":["// const { CHECKS } = require(\"./checks/AtomicChecks\");\nconst { Type } = require(\"../parser/types\");\n// const { ELECTRON_ATOMIC_UPGRADE_CHECKS } = require(\"./checks/AtomicChecks/ElectronAtomicUpgradeChecks\");\n// const { isDisabledByInlineComment } = require(\"../utils/ex\")\nconst { getSample } = require(\"../utils\");\nconst chalk = require(\"chalk\");\nconst { gte, compare } = require(\"semver\");\n\nclass Finder {\n  constructor(customScan, excludeFromScan, electronUpgrade) {\n    let candidateChecks = Array.from(CHECKS)\n\n    if (electronUpgrade) {\n      const [currentVersion, targetVersion] = electronUpgrade.split('..');\n      if (currentVersion && targetVersion) {\n        Object.keys(ELECTRON_ATOMIC_UPGRADE_CHECKS).forEach(versionToCheck => {\n          if (versionToCheck > currentVersion && versionToCheck <= targetVersion) {\n            candidateChecks = candidateChecks.concat(ELECTRON_ATOMIC_UPGRADE_CHECKS[versionToCheck]);\n          }\n        })\n      } else {\n        console.error(chalk.red(`When specifying the upgrade options please specify your current version and target version like this: x..y (eg 7..8)`));\n        process.exit(1);\n      }\n    }\n\n    this._enabled_checks = Object.assign(Object.create(candidateChecks), candidateChecks);\n    if (customScan && customScan.length > 0) {\n      var checksNames = this._enabled_checks.map(check => check.name.toLowerCase());\n      if (!customScan.every(r => checksNames.includes(r))) {\n        console.error(chalk.red(`You have an error in your custom checks list. Maybe you misspelt some check names?`));\n        process.exit(1);\n      } else {\n        for (var i = this._enabled_checks.length - 1; i >= 0; i--)\n          if (!customScan.includes(this._enabled_checks[i].name.toLowerCase()))\n            this._enabled_checks.splice(i, 1);\n      }\n    }\n\n    if (excludeFromScan && excludeFromScan.length > 0) {\n      var checksNames = this._enabled_checks.map(check => check.name.toLowerCase());\n      if (!excludeFromScan.every(r => checksNames.includes(r))) {\n        console.error(chalk.red(`You have an error in your custom checks list. Maybe you misspelt some check names?`));\n        process.exit(1);\n      } else {\n        for (var i = this._enabled_checks.length - 1; i >= 0; i--)\n          if (excludeFromScan.includes(this._enabled_checks[i].name.toLowerCase()))\n            this._enabled_checks.splice(i, 1);\n      }\n    }\n\n    this._checks_by_type = new Map();\n    this.init_checks_list();\n  }\n\n  get enabled_checks() { return this._enabled_checks; }\n\n  get checks_by_type() { return this._checks_by_type; }\n\n  init_checks_list() {\n    for (const type of Object.keys(Type)) {\n      this._checks_by_type.set(Type[type], []);\n    }\n    for (const check of this.enabled_checks) {\n      const checkInstance = new check();\n      this._checks_by_type.get(checkInstance.type).push(checkInstance);\n    }\n  }\n\n  async find(file, data, type, content, use_only_checks = null, electronVersion = null) {\n    if (!electronVersion) electronVersion = '0.1.0';\n\n    const all_defaults = require('../../../defaults.json');\n    const version_of_last_default_change = Object.keys(all_defaults).sort((a, b) => compare(a, b)).reverse().find(current_version => gte(electronVersion, current_version));\n    const defaults = all_defaults[version_of_last_default_change];\n\n    const checks = this._checks_by_type.get(type).filter((check) => {\n      if (use_only_checks && !use_only_checks.includes(check.id)) {\n        return false;\n      }\n      return true;\n    });\n    const fileLines = content.toString().split('\\n');\n    const issues = [];\n    const rootData = data;\n\n    switch (type) {\n      case Type.JAVASCRIPT:\n        data.astParser.traverseTree(data, {\n          enter: (node) => {\n            rootData.Scope.updateFunctionScope(rootData.astParser.getNode(node), \"enter\");\n            for (const check of checks) {\n              const matches = check.match(rootData.astParser.getNode(node), rootData.astParser, rootData.Scope, defaults, electronVersion);\n              if (matches) {\n                for(const m of matches) {\n                  const firstLineSample = getSample(fileLines, 0);\n                  const matchedLineSample = getSample(fileLines, m.line - 1);\n                  const visibility = isDisabledByInlineComment(firstLineSample, matchedLineSample, check, Type.JAVASCRIPT);\n                  const issue = { file, sample: matchedLineSample, location: {line: m.line, column: m.column}, id: m.id, description: m.description, properties: m.properties, severity: m.severity, confidence: m.confidence, manualReview: m.manualReview, shortenedURL: m.shortenedURL, visibility: visibility, constructorName: check.constructor.name };\n                  issues.push(issue);\n                }\n              }\n            }\n          },\n          leave: (node) => {\n            rootData.Scope.updateFunctionScope(rootData.astParser.getNode(node), \"leave\");\n          }\n        });\n\n        break;\n      case Type.HTML:\n        for (const check of checks) {\n          const matches = check.match(data, content, defaults, electronVersion);\n          if(matches){\n            for(const m of matches) {\n              const firstLineSample = getSample(fileLines, 0);\n              const matchedLineSample = getSample(fileLines, m.line - 1);\n              const visibility = isDisabledByInlineComment(firstLineSample, matchedLineSample, check, Type.HTML);\n              const issue = {file, sample: matchedLineSample, location: {line: m.line, column: m.column}, id: m.id, description: m.description, properties: m.properties, severity: m.severity, confidence: m.confidence, manualReview: m.manualReview, shortenedURL: m.shortenedURL, visibility: visibility, constructorName: check.constructor.name };\n              issues.push(issue);\n            }\n          }\n        }\n        break;\n      case Type.JSON:\n        for (const check of checks) {\n          const matches = await check.match(data, defaults, electronVersion);\n          if (matches) {\n            for(const m of matches) {\n              const sample = getSample(fileLines, m.line - 1);\n              const issue = {file, sample, location: {line: m.line, column: m.column}, id: m.id, description: m.description, properties: m.properties, severity: m.severity, confidence: m.confidence, manualReview: m.manualReview, shortenedURL: m.shortenedURL, visibility: { excludesGlobal: [], inlineDisabled: false, globalDisabled: false, globalCheckDisabled: false }, constructorName: check.constructor.name };\n              issues.push(issue);\n            }\n          }\n        }\n    }\n\n    return issues;\n  }\n}\n\nmodule.exports = {\n  Finder\n}"]}