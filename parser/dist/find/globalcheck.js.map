{"version":3,"sources":["../../src/find/globalcheck.js"],"names":["chalk","require","GlobalChecks","constructor","customScan","excludeFromScan","electronUpgrade","candidateChecks","Array","from","GLOBAL_CHECKS","currentVersion","targetVersion","split","_enabled_checks","Object","keys","ELECTRON_GLOBAL_UPGRADE_CHECKS","forEach","versionToCheck","concat","console","error","red","process","exit","length","globalChecksNames","map","globalCheck","name","toLowerCase","customGlobals","filter","r","includes","some","i","splice","_constructed_checks","dependencies","init_checks_list","check","checkInstance","push","depends","dependency","getResults","issues","output","result","issue","processed","constructorName","targetedIssues","visibility","inlineDisabled","perform","module","exports"],"mappings":"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","file":"globalcheck.js","sourcesContent":["// const { ELECTRON_GLOBAL_UPGRADE_CHECKS } = require('./checks/GlobalChecks/ElectronGlobalUpgradeChecks');\n// const { GLOBAL_CHECKS } = require(\"./checks/GlobalChecks\");\nconst { chalk } = require(\"chalk\");\n\nclass GlobalChecks {\n    constructor(customScan, excludeFromScan, electronUpgrade) {\n        let candidateChecks = Array.from(GLOBAL_CHECKS);\n\n        if (electronUpgrade) {\n          const [currentVersion, targetVersion] = electronUpgrade.split('..');\n          if (currentVersion && targetVersion) {\n            this._enabled_checks = [];\n            Object.keys(ELECTRON_GLOBAL_UPGRADE_CHECKS).forEach(versionToCheck => {\n              if (versionToCheck > currentVersion && versionToCheck <= targetVersion) {\n                candidateChecks = candidateChecks.concat(ELECTRON_GLOBAL_UPGRADE_CHECKS[versionToCheck]);\n              }\n            })\n          } else {\n            console.error(chalk.red(`When specifying the upgrade options please specify your current version and target version like this: x..y (eg 7..8)`));\n            process.exit(1);\n          }\n        }\n\n        this._enabled_checks = candidateChecks;\n        if (customScan && customScan.length > 0) {\n          var globalChecksNames = this._enabled_checks.map(globalCheck => globalCheck.name.toLowerCase());\n          var customGlobals = customScan.filter(r => r.includes('globalcheck'));\n          if (customGlobals.length > 0 && !customGlobals.some(r => globalChecksNames.includes(r))) {\n            console.error(chalk.red(`You have an error in your custom checks list. Maybe you misspelt some check names?`));\n            process.exit(1);\n          } else {\n          for (var i = globalChecksNames.length - 1; i >= 0; i--) \n            if (!customGlobals.includes(globalChecksNames[i]))\n            this._enabled_checks.splice(i, 1);\n          }\n        }\n\n        if (excludeFromScan && excludeFromScan.length > 0) {\n          var globalChecksNames = this._enabled_checks.map(globalCheck => globalCheck.name.toLowerCase());\n          var customGlobals = excludeFromScan.filter(r => r.includes('globalcheck'));\n          if (customGlobals.length > 0 && !customGlobals.some(r => globalChecksNames.includes(r))) {\n            console.error(chalk.red(`You have an error in your custom checks list. Maybe you misspelt some check names?`));\n            process.exit(1);\n          } else {\n          for (var i = globalChecksNames.length - 1; i >= 0; i--) \n            if (customGlobals.includes(globalChecksNames[i]))\n            this._enabled_checks.splice(i, 1);\n          }\n        }\n        this._constructed_checks = [];\n        this.dependencies = [];\n        this.init_checks_list();\n    }\n\n    init_checks_list() {\n      for (const check of this._enabled_checks) {\n        const checkInstance = new check();\n        this._constructed_checks.push(checkInstance);\n        this.dependencies = [...this.dependencies, ...checkInstance.depends];\n      }\n      this.dependencies = this.dependencies.map(dependency => dependency.toLowerCase());\n    }\n\n    async getResults(issues, output) {\n      var result = [];\n      issues.forEach(issue => issue.processed = false);\n\n      for (const check of this._constructed_checks) {\n\n        issues.forEach(issue => {\n          if (check.depends.includes(issue.constructorName))\n            issue.processed = true\n        });\n\n        var targetedIssues = issues.filter(issue => check.depends.includes(issue.constructorName) && !issue.visibility.inlineDisabled);\n\n        result = [...result, ...await check.perform(targetedIssues, output)];\n      }\n\n      return [...result, ...issues.filter(issue => !issue.processed)];\n    }\n\n}\n\nmodule.exports = {\n    GlobalChecks\n}"]}