{"version":3,"sources":["../src/index.js"],"names":["program","require","path","chalk","app","VER","version","is_directory","extension","forCli","output","description","option","parse","process","argv","input","outputHelp","exit","console","error","red","fileFormat","split","pop","checks","map","check","trim","toLowerCase","excludeChecks","verbose","falsyStrings","includes","parserPlugins","p","resolve","isSarif","customScan","excludeFromScan","severitySet","severity","confidenceSet","confidence","isRelative","relative","isVerbose","electronUpgrade","upgrade","electronVersionOverride","electronVersion","catch","stack"],"mappings":"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","file":"index.js","sourcesContent":["\n\nconst program = require(\"commander\");\nconst path = require(\"path\");\nconst chalk = require(\"chalk\");\nconst { app } = require(\"./app\");\nconst VER = require('../package.json').version;\nconst { is_directory, extension } = require(\"./utils\");\n\nconst forCli = !program.output;\n\nprogram\n  .version(VER)\n  .description('electron exploit check tools')\n  .option('-i, --input <path>', 'input [directory | .js | .html | .asar]')\n  .parse(process.argv);\n\nif(!program.input){\n  program.outputHelp();\n  process.exit(1);\n} else {\n    if(extension(program.input) != 'js' && extension(program.input) != 'html' && extension(program.input) != 'asar' && !(is_directory(program.input))) {\n        console.error(chalk.red('Please specify file format extension.'));\n        program.outputHelp();\n        process.exit(1);\n    }\n}\n\nif(program.output){\n  program.fileFormat = program.output.split('.').pop();\n  if(program.fileFormat !== 'csv' && program.fileFormat !== 'sarif'){\n    console.error(chalk.red('Please specify file format extension.'));\n    program.outputHelp();\n    process.exit(1);\n  }\n}\n\nif (typeof program.checks !== 'undefined' && program.checks){\n  program.checks = program.checks.split(\",\").map(check => check.trim().toLowerCase());\n} else program.checks = [];\n\nif (typeof program.excludeChecks !== 'undefined' && program.excludeChecks){\n  program.excludeChecks = program.excludeChecks.split(\",\").map(check => check.trim().toLowerCase());\n} else program.excludeChecks = [];\n\nif (typeof program.verbose !== 'undefined' && (falsyStrings.includes(program.verbose)))\n  program.verbose = false;\nelse\n  program.verbose = true;\n\nif (typeof program.parserPlugins !== 'undefined' && program.parserPlugins)\n  program.parserPlugins = program.parserPlugins.split(\",\").map(p => p.trim());\nelse\n  program.parserPlugins = [];\n\n\nconst input = path.resolve(program.input);\n\napp({\n  input,\n  output: program.output,\n  isSarif: program.fileFormat === 'sarif',\n  customScan: program.checks,\n  excludeFromScan: program.excludeChecks,\n  severitySet: program.severity,\n  confidenceSet: program.confidence,\n  isRelative: program.relative,\n  isVerbose: program.verbose,\n  electronUpgrade: program.upgrade,\n  electronVersionOverride: program.electronVersion,\n  parserPlugins: program.parserPlugins\n}, forCli).catch(error => {\n  console.error(chalk.red(error.stack));\n  process.exit(1);\n});"]}